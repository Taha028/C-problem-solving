class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        unordered_set<int> nums1Set(nums1.begin(), nums1.end());
        for (int num : nums1Set) {
            for (int j = 0; j < nums2.size(); j++) {
                if (num == nums2[j]) {
                    res.push_back(num);
                    break;
                }
            }
        }

        return res;
    }
};




#Binary Search Approach


class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int n1=nums1.size();
        int n2=nums2.size();
        int i=0;
        int j=0;
        vector<int> intersect;
        while(i<n1 && j<n2){
            if(nums1[i]<nums2[j]){
                i++;
            }
            else if(nums1[i]>nums2[j]){
                j++;
            }
            else{
                //nums1[i]==nums2[j] or intersect is empty
                if(intersect.empty() || nums1[i]!=intersect.back()){
                    intersect.push_back(nums1[i]);
                }
                i++;
                j++;
            }
        }
    return intersect;
    }
};
