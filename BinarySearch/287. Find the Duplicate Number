class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_map<int,int> a;
        vector<int> c;
        for(int i:nums){
            if(a.find(i)!=a.end()){
                a[i]+=1;
            }
            else{
                a[i]=1;
            }
        }
        for(auto i:a){
            if(i.second>1){
                c.push_back(i.first);
            }
        }
        return c[0];
        
    }
};


Binary Search Approach

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int left = 1;
        int right = n - 1;
        while (left < right) {
            int mid = (left + right) / 2;
            int count = 0;
            for (int i = 0; i < n; i++) {
                if (nums[i] <= mid) {
                    count++;
                }
            }
            if (count > mid) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
};
